# MATRIX.CSS NEXT.JS FRAMEWORK - CONSOLIDATED FILE

===== package.json =====
{
  "name": "matrix-nextjs",
  "version": "1.0.0",
  "description": "A Matrix-inspired UI framework for Next.js",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "framer-motion": "^10.16.4",
    "next": "^14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwind-merge": "^1.14.0"
  },
  "devDependencies": {
    "@types/node": "^20.8.9",
    "@types/react": "^18.2.33",
    "@types/react-dom": "^18.2.14",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.52.0",
    "eslint-config-next": "^14.0.0",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.2.2"
  }
}

===== tsconfig.json =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

===== next.config.js =====
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig

===== postcss.config.js =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

===== tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        matrix: {
          bg: 'var(--m-bg)',
          text: 'var(--m-text)',
          'text-dim': 'var(--m-text-dim)',
          'text-bright': 'var(--m-text-bright)',
          'text-white': 'var(--m-text-white)',
          glow: 'var(--m-glow)',
          panel: 'var(--m-panel)',
          border: 'var(--m-border)',
          overlay: 'var(--m-overlay)',
          primary: 'var(--m-primary)',
          secondary: 'var(--m-secondary)',
          info: 'var(--m-info)',
          success: 'var(--m-success)',
          warning: 'var(--m-warning)',
          danger: 'var(--m-danger)',
          light: 'var(--m-light)',
          dark: 'var(--m-dark)',
        },
      },
      fontFamily: {
        matrix: 'var(--m-font-main)',
        'matrix-alt': 'var(--m-font-alt)',
        'matrix-hacker': 'var(--m-font-hacker)',
      },
      animation: {
        'glow-pulse': 'glow-pulse 2s infinite',
        scanline: 'scanline 10s linear infinite',
        noise: 'noise 1s steps(2) infinite',
        flicker: 'flicker 3s infinite',
        'cursor-blink': 'cursor-blink 1s step-end infinite',
        'neuron-pulse': 'neuron-pulse 2s infinite',
        'connection-pulse': 'connection-pulse 2s infinite',
      },
      keyframes: {
        'glow-pulse': {
          '0%, 100%': { textShadow: '0 0 5px var(--m-glow)' },
          '50%': { textShadow: '0 0 20px var(--m-glow), 0 0 30px var(--m-glow)' },
        },
        scanline: {
          '0%': { top: '0' },
          '100%': { top: '100%' },
        },
        noise: {
          '0%': { transform: 'translate(0, 0)' },
          '100%': { transform: 'translate(-10%, -10%)' },
        },
        flicker: {
          '0%, 19.999%, 22%, 62.999%, 64%, 64.999%, 70%, 100%': { opacity: '1' },
          '20%, 21.999%, 63%, 63.999%, 65%, 69.999%': { opacity: '0' },
        },
        'cursor-blink': {
          '0%, 100%': { opacity: '0' },
          '50%': { opacity: '1' },
        },
        'neuron-pulse': {
          '0%, 100%': { boxShadow: '0 0 5px var(--m-glow)' },
          '50%': { boxShadow: '0 0 15px var(--m-glow), 0 0 20px var(--m-glow)' },
        },
        'connection-pulse': {
          '0%, 100%': { opacity: '0.5' },
          '50%': { opacity: '1' },
        },
      },
    },
  },
  plugins: [],
}

===== src/styles/globals.css =====
@import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Core colors */
  --m-black: #000000;
  --m-bg: #0c0c0c;
  --m-text: #00ff41; /* Matrix green */
  --m-text-dim: #0a3f0a;
  --m-text-bright: #00ff97;
  --m-text-white: #ffffff;
  --m-glow: rgba(0, 255, 65, 0.6);
  --m-panel: #0f0f0f;
  --m-border: #143214;
  --m-overlay: rgba(0, 10, 0, 0.8);
  
  /* Functional colors */
  --m-primary: #00ff41;
  --m-secondary: #072707;
  --m-info: #39a0ed;
  --m-success: #00ff41;
  --m-warning: #ffe100;
  --m-danger: #ff2222;
  --m-light: #1d1d1d;
  --m-dark: #030303;
  
  /* Typography */
  --m-font-main: 'Courier New', monospace;
  --m-font-alt: 'Lucida Console', Monaco, monospace;
  --m-font-hacker: 'VT323', monospace;
  --m-font-size: 16px;
  --m-line-height: 1.6;
  
  /* Spacing */
  --m-space-xs: 0.25rem;
  --m-space-sm: 0.5rem;
  --m-space-md: 1rem;
  --m-space-lg: 1.5rem;
  --m-space-xl: 2.5rem;
  
  /* Timing */
  --m-time-fast: 0.2s;
  --m-time-med: 0.5s;
  --m-time-slow: 1s;
  
  /* Effects */
  --m-shadow: 0 0 10px var(--m-glow);
  --m-radius: 3px;
  
  /* Grid */
  --m-cols: 12;
  --m-gap: 20px;
  --m-container-width: 1200px;

  /* Interactivity */
  --m-accent-color: var(--m-primary);
  --m-caret-color: var(--m-primary);
  color-scheme: dark;
  --m-scroll-behavior: smooth;
}

[data-theme="light"] {
  --m-bg: #f0f0f0;
  --m-text: #006400;
  --m-text-dim: #008000;
  --m-text-bright: #00aa00;
  --m-text-white: #333333;
  --m-glow: rgba(0, 100, 0, 0.4);
  --m-panel: #ffffff;
  --m-border: #008000;
  --m-overlay: rgba(240, 255, 240, 0.8);
  
  /* Functional colors - light theme */
  --m-primary: #008000;
  --m-secondary: #e0f5e0;
  --m-info: #0066cc;
  --m-success: #006400;
  --m-warning: #cc9900;
  --m-danger: #ff2222;
  --m-light: #dcdcdc;
  --m-dark: #030303;
}

html {
  font-size: var(--m-font-size);
  scroll-behavior: smooth;
}

body {
  background-color: var(--m-bg);
  color: var(--m-text);
  font-family: var(--m-font-main);
  line-height: var(--m-line-height);
  min-height: 100vh;
  overflow-x: hidden;
  position: relative;
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--m-font-hacker);
  font-weight: 700;
  margin-bottom: var(--m-space-md);
  line-height: 1.2;
  color: var(--m-text-bright);
}

h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.75rem; }
h4 { font-size: 1.5rem; }
h5 { font-size: 1.25rem; }
h6 { font-size: 1rem; }

p {
  margin-bottom: var(--m-space-md);
}

a {
  color: var(--m-text-bright);
  text-decoration: none;
  transition: color var(--m-time-fast);
  position: relative;
}

a:hover {
  color: var(--m-text);
  text-shadow: 0 0 5px var(--m-glow);
}

a::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 1px;
  bottom: -2px;
  left: 0;
  background-color: var(--m-text-bright);
  transform: scaleX(0);
  transition: transform var(--m-time-fast);
  transform-origin: bottom right;
}

a:hover::after {
  transform: scaleX(1);
  transform-origin: bottom left;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  background: var(--m-bg);
}

::-webkit-scrollbar-thumb {
  background: var(--m-secondary);
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--m-text-dim);
}

===== src/utils/cn.ts =====
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

===== src/context/ThemeContext.tsx =====
import React, { createContext, useContext, useEffect, useState } from 'react';

type Theme = 'dark' | 'light';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
  setTheme: (theme: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // Initialize theme from localStorage or default to dark
  const [theme, setTheme] = useState<Theme>('dark');
  const [mounted, setMounted] = useState(false);

  // Only run this effect on the client-side
  useEffect(() => {
    setMounted(true);
    const storedTheme = localStorage.getItem('matrixTheme') as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {
      setTheme('light');
    }
  }, []);

  // Apply theme to document
  useEffect(() => {
    if (mounted) {
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem('matrixTheme', theme);
    }
  }, [theme, mounted]);

  const toggleTheme = () => {
    setTheme(prev => (prev === 'dark' ? 'light' : 'dark'));
  };

  const value = {
    theme,
    toggleTheme,
    setTheme,
  };

  // Avoid hydration mismatch by not rendering until mounted
  if (!mounted) {
    return <>{children}</>;
  }

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

===== src/components/ui/Button.tsx =====
import React, { ButtonHTMLAttributes, forwardRef } from 'react';
import { VariantProps, cva } from 'class-variance-authority';
import { cn } from '@/utils/cn';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded relative border font-matrix transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-matrix-text focus:ring-opacity-50 disabled:opacity-50 disabled:pointer-events-none',
  {
    variants: {
      variant: {
        default:
          'bg-matrix-panel border-matrix-border text-matrix-text hover:bg-matrix-secondary hover:text-matrix-text-bright before:absolute before:inset-0 before:border-t-2 before:border-t-matrix-text before:opacity-0 hover:before:opacity-100 before:transition-opacity',
        primary:
          'bg-matrix-primary bg-opacity-20 border-matrix-primary text-matrix-text-bright hover:bg-opacity-30 hover:border-matrix-text-bright',
        outline:
          'bg-transparent border-matrix-text text-matrix-text hover:bg-matrix-text hover:bg-opacity-10',
        ghost:
          'bg-transparent border-transparent text-matrix-text hover:bg-matrix-text hover:bg-opacity-10',
        terminal:
          'bg-black bg-opacity-60 border-matrix-text text-matrix-text font-matrix-hacker hover:text-matrix-text-bright hover:border-matrix-text-bright hover:shadow-[0_0_10px_var(--m-glow)]',
        danger:
          'bg-matrix-danger bg-opacity-20 border-matrix-danger text-matrix-danger hover:bg-opacity-30',
      },
      size: {
        sm: 'h-8 px-3 text-xs',
        md: 'h-10 px-4 text-sm',
        lg: 'h-12 px-6 text-base',
        icon: 'h-10 w-10',
      },
      hasGlow: {
        true: 'shadow-[0_0_10px_var(--m-glow)] hover:shadow-[0_0_15px_var(--m-glow)]',
        false: '',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
      hasGlow: false,
    },
  }
);

export interface ButtonProps
  extends ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, hasGlow, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, hasGlow, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = 'Button';

export { Button, buttonVariants };

===== src/components/ui/Card.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { cn } from '@/utils/cn';

export interface CardProps extends HTMLAttributes<HTMLDivElement> {
  glowOnHover?: boolean;
}

const Card = forwardRef<HTMLDivElement, CardProps>(
  ({ className, glowOnHover = true, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'relative flex flex-col bg-matrix-panel border border-matrix-border rounded overflow-hidden transition-all duration-200',
          glowOnHover && 'hover:translate-y-[-5px] hover:shadow-[0_5px_15px_rgba(0,255,65,0.1)]',
          className
        )}
        {...props}
      >
        {glowOnHover && (
          <div className="absolute top-0 left-0 w-full h-[2px] bg-gradient-to-r from-matrix-bg via-matrix-text to-matrix-bg opacity-0 transition-opacity duration-500 group-hover:opacity-100 hover:opacity-100" />
        )}
        {props.children}
      </div>
    );
  }
);

Card.displayName = 'Card';

const CardHeader = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'px-6 py-3 border-b border-matrix-border bg-black bg-opacity-20',
          className
        )}
        {...props}
      />
    );
  }
);

CardHeader.displayName = 'CardHeader';

const CardTitle = forwardRef<HTMLHeadingElement, HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => {
    return (
      <h3
        ref={ref}
        className={cn('text-xl font-bold text-matrix-text-bright mb-0', className)}
        {...props}
      />
    );
  }
);

CardTitle.displayName = 'CardTitle';

const CardDescription = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => {
    return (
      <p
        ref={ref}
        className={cn('text-matrix-text-dim text-sm', className)}
        {...props}
      />
    );
  }
);

CardDescription.displayName = 'CardDescription';

const CardContent = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('p-6 pt-0 flex-1', className)}
        {...props}
      />
    );
  }
);

CardContent.displayName = 'CardContent';

const CardFooter = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('px-6 py-3 border-t border-matrix-border bg-black bg-opacity-20', className)}
        {...props}
      />
    );
  }
);

CardFooter.displayName = 'CardFooter';

export { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter };

===== src/components/ui/Alert.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { VariantProps, cva } from 'class-variance-authority';
import { cn } from '@/utils/cn';

const alertVariants = cva(
  'relative overflow-hidden border p-4 rounded [&>svg~*]:pl-7 [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4',
  {
    variants: {
      variant: {
        default: 'bg-matrix-panel border-matrix-border text-matrix-text',
        primary: 'bg-matrix-primary bg-opacity-20 border-matrix-primary text-matrix-text-bright',
        success: 'bg-matrix-success bg-opacity-20 border-matrix-success text-matrix-success',
        warning: 'bg-matrix-warning bg-opacity-20 border-matrix-warning text-matrix-warning',
        danger: 'bg-matrix-danger bg-opacity-20 border-matrix-danger text-matrix-danger',
        info: 'bg-matrix-info bg-opacity-20 border-matrix-info text-matrix-info',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface AlertProps
  extends HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof alertVariants> {}

const Alert = forwardRef<HTMLDivElement, AlertProps>(
  ({ className, variant, ...props }, ref) => {
    return (
      <div
        ref={ref}
        role="alert"
        className={cn(alertVariants({ variant }), className)}
        {...props}
      />
    );
  }
);
Alert.displayName = 'Alert';

const AlertTitle = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5
      ref={ref}
      className={cn('mb-1 font-medium leading-none tracking-tight', className)}
      {...props}
    />
  )
);
AlertTitle.displayName = 'AlertTitle';

const AlertDescription = forwardRef<HTMLParagraphElement, HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('text-sm opacity-90', className)}
      {...props}
    />
  )
);
AlertDescription.displayName = 'AlertDescription';

export { Alert, AlertTitle, AlertDescription };

===== src/components/ui/Badge.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { VariantProps, cva } from 'class-variance-authority';
import { cn } from '@/utils/cn';

const badgeVariants = cva(
  'inline-flex items-center rounded px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-matrix-text focus:ring-offset-2',
  {
    variants: {
      variant: {
        default: 'bg-matrix-panel border border-matrix-border text-matrix-text',
        primary: 'bg-matrix-primary bg-opacity-20 text-matrix-text-bright',
        secondary: 'bg-matrix-secondary border border-matrix-border text-matrix-text',
        success: 'bg-matrix-success bg-opacity-20 text-matrix-success',
        warning: 'bg-matrix-warning bg-opacity-20 text-matrix-warning',
        danger: 'bg-matrix-danger bg-opacity-20 text-matrix-danger',
        info: 'bg-matrix-info bg-opacity-20 text-matrix-info',
        outline: 'border border-matrix-border text-matrix-text bg-transparent',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export interface BadgeProps
  extends HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

const Badge = forwardRef<HTMLDivElement, BadgeProps>(
  ({ className, variant, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(badgeVariants({ variant }), className)}
        {...props}
      />
    );
  }
);

Badge.displayName = 'Badge';

export { Badge, badgeVariants };

===== src/components/ui/Progress.tsx =====
import * as React from 'react';
import { VariantProps, cva } from 'class-variance-authority';
import { cn } from '@/utils/cn';

const progressVariants = cva('h-4 overflow-hidden rounded bg-opacity-30 bg-[rgba(0,30,0,0.3)]', {
  variants: {
    variant: {
      default: '',
      striped: '',
      animated: '',
    },
  },
  defaultVariants: {
    variant: 'default',
  },
});

const progressBarVariants = cva(
  'h-full flex items-center justify-center text-xs text-white transition-all',
  {
    variants: {
      variant: {
        default: 'bg-matrix-primary',
        striped:
          'bg-matrix-primary bg-[linear-gradient(45deg,rgba(255,255,255,0.15)25%,transparent25%,transparent50%,rgba(255,255,255,0.15)50%,rgba(255,255,255,0.15)75%,transparent75%,transparent)] bg-[size:1rem_1rem]',
        animated:
          'bg-matrix-primary bg-[linear-gradient(45deg,rgba(255,255,255,0.15)25%,transparent25%,transparent50%,rgba(255,255,255,0.15)50%,rgba(255,255,255,0.15)75%,transparent75%,transparent)] bg-[size:1rem_1rem] animate-[progress-bar-stripes_1s_linear_infinite]',
      },
      color: {
        default: 'bg-matrix-primary',
        success: 'bg-matrix-success',
        warning: 'bg-matrix-warning',
        danger: 'bg-matrix-danger',
        info: 'bg-matrix-info',
      },
    },
    defaultVariants: {
      variant: 'default',
      color: 'default',
    },
  }
);

export interface ProgressProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof progressVariants> {
  value?: number;
  max?: number;
  color?: 'default' | 'success' | 'warning' | 'danger' | 'info';
  showLabel?: boolean;
}

const Progress = React.forwardRef<HTMLDivElement, ProgressProps>(
  ({ className, variant, value = 0, max = 100, color, showLabel = false, ...props }, ref) => {
    const percentage = Math.min(Math.max(0, (value / max) * 100), 100);

    return (
      <div
        ref={ref}
        className={cn(progressVariants({ variant }), className)}
        role="progressbar"
        aria-valuenow={value}
        aria-valuemin={0}
        aria-valuemax={max}
        aria-label={`${percentage}% complete`}
        {...props}
      >
        <div
          className={cn(progressBarVariants({ variant, color }))}
          style={{ width: `${percentage}%` }}
        >
          {showLabel && `${Math.round(percentage)}%`}
        </div>
      </div>
    );
  }
);

Progress.displayName = 'Progress';

export { Progress };

===== src/components/ui/Tabs.tsx =====
import * as React from 'react';
import { cn } from '@/utils/cn';

const TabsContext = React.createContext<{
  selectedTab: string;
  setSelectedTab: (id: string) => void;
}>({
  selectedTab: '',
  setSelectedTab: () => {},
});

interface TabsProps {
  defaultTab?: string;
  children: React.ReactNode;
  className?: string;
}

export const Tabs: React.FC<TabsProps> = ({ defaultTab, children, className }) => {
  const [selectedTab, setSelectedTab] = React.useState<string>(defaultTab || '');

  // Set first tab as default if none provided
  React.useEffect(() => {
    if (!defaultTab && React.Children.toArray(children).length > 0) {
      const firstTab = React.Children.toArray(children)[0] as React.ReactElement;
      if (firstTab && firstTab.props && firstTab.props.id) {
        setSelectedTab(firstTab.props.id);
      }
    }
  }, [defaultTab, children]);

  return (
    <TabsContext.Provider value={{ selectedTab, setSelectedTab }}>
      <div className={cn('', className)}>{children}</div>
    </TabsContext.Provider>
  );
};

interface TabListProps {
  children: React.ReactNode;
  className?: string;
}

export const TabList: React.FC<TabListProps> = ({ children, className }) => {
  return (
    <div
      className={cn(
        'flex border-b border-matrix-border mb-4 overflow-x-auto',
        className
      )}
      role="tablist"
    >
      {children}
    </div>
  );
};

interface TabProps {
  id: string;
  children: React.ReactNode;
  className?: string;
}

export const Tab: React.FC<TabProps> = ({ id, children, className }) => {
  const { selectedTab, setSelectedTab } = React.useContext(TabsContext);
  const isActive = selectedTab === id;

  return (
    <button
      role="tab"
      aria-selected={isActive}
      id={`tab-${id}`}
      tabIndex={isActive ? 0 : -1}
      className={cn(
        'px-4 py-2 text-sm font-medium transition-all border-b-2 -mb-px',
        isActive
          ? 'border-matrix-text-bright text-matrix-text-bright'
          : 'border-transparent text-matrix-text hover:text-matrix-text-bright hover:border-matrix-text-dim',
        className
      )}
      onClick={() => setSelectedTab(id)}
    >
      {children}
    </button>
  );
};

interface TabPanelProps {
  id: string;
  children: React.ReactNode;
  className?: string;
}

export const TabPanel: React.FC<TabPanelProps> = ({ id, children, className }) => {
  const { selectedTab } = React.useContext(TabsContext);
  const isActive = selectedTab === id;

  if (!isActive) return null;

  return (
    <div
      role="tabpanel"
      aria-labelledby={`tab-${id}`}
      id={`tabpanel-${id}`}
      className={cn('focus:outline-none', className)}
      tabIndex={0}
    >
      {children}
    </div>
  );
};

===== src/components/ui/Modal.tsx =====
import React, { Fragment, useRef, useState, useEffect } from 'react';
import { cn } from '@/utils/cn';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
  className?: string;
  showCloseButton?: boolean;
  closeOnBackdropClick?: boolean;
}

export const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  children,
  className,
  showCloseButton = true,
  closeOnBackdropClick = true,
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const backdropRef = useRef<HTMLDivElement>(null);
  const [isClosing, setIsClosing] = useState(false);

  // Close on Escape key
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        handleClose();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isOpen]);

  // Handle body scroll
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      setIsClosing(false);
      onClose();
    }, 300);
  };

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (closeOnBackdropClick && e.target === backdropRef.current) {
      handleClose();
    }
  };

  if (!isOpen && !isClosing) return null;

  return (
    <div
      ref={backdropRef}
      className={cn(
        'fixed inset-0 z-50 bg-matrix-overlay backdrop-blur-sm flex items-center justify-center p-4',
        isClosing ? 'animate-fade-out' : 'animate-fade-in'
      )}
      onClick={handleBackdropClick}
      aria-modal="true"
      role="dialog"
    >
      <div
        ref={modalRef}
        className={cn(
          'relative bg-matrix-panel border border-matrix-border rounded shadow-lg w-full max-w-md transform transition-all duration-300',
          isClosing ? 'opacity-0 scale-95' : 'opacity-100 scale-100',
          className
        )}
      >
        {showCloseButton && (
          <button
            className="absolute top-3 right-3 text-matrix-text-dim hover:text-matrix-text-bright"
            onClick={handleClose}
            aria-label="Close modal"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
        {children}
      </div>
    </div>
  );
};

export const ModalHeader: React.FC<{ className?: string; children: React.ReactNode }> = ({
  className,
  children,
}) => {
  return (
    <div
      className={cn('border-b border-matrix-border p-4 font-matrix-hacker', className)}
    >
      {children}
    </div>
  );
};

export const ModalBody: React.FC<{ className?: string; children: React.ReactNode }> = ({
  className,
  children,
}) => {
  return <div className={cn('p-4', className)}>{children}</div>;
};

export const ModalFooter: React.FC<{ className?: string; children: React.ReactNode }> = ({
  className,
  children,
}) => {
  return (
    <div
      className={cn(
        'border-t border-matrix-border p-4 flex justify-end space-x-2',
        className
      )}
    >
      {children}
    </div>
  );
};

===== src/components/ui/Input.tsx =====
import React, { forwardRef, InputHTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, label, error, id, ...props }, ref) => {
    const inputId = id || Math.random().toString(36).substring(2, 9);

    return (
      <div className="mb-4">
        {label && (
          <label
            htmlFor={inputId}
            className="block mb-2 text-sm font-medium text-matrix-text"
          >
            {label}
          </label>
        )}
        <input
          id={inputId}
          className={cn(
            'block w-full p-2 bg-matrix-bg bg-opacity-90 border text-matrix-text',
            'focus:ring-2 focus:ring-matrix-text focus:outline-none',
            'border-matrix-border rounded transition-all duration-200',
            'placeholder:text-matrix-text-dim',
            error && 'border-matrix-danger',
            className
          )}
          ref={ref}
          {...props}
        />
        {error && <p className="mt-1 text-sm text-matrix-danger">{error}</p>}
      </div>
    );
  }
);

Input.displayName = 'Input';

export { Input };

===== src/components/ui/Select.tsx =====
import React, { forwardRef, SelectHTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {
  label?: string;
  error?: string;
  options: Array<{ value: string; label: string }>;
}

const Select = forwardRef<HTMLSelectElement, SelectProps>(
  ({ className, label, error, id, options, ...props }, ref) => {
    const selectId = id || Math.random().toString(36).substring(2, 9);

    return (
      <div className="mb-4">
        {label && (
          <label
            htmlFor={selectId}
            className="block mb-2 text-sm font-medium text-matrix-text"
          >
            {label}
          </label>
        )}
        <select
          id={selectId}
          className={cn(
            'block w-full p-2 bg-matrix-bg bg-opacity-90 border text-matrix-text',
            'focus:ring-2 focus:ring-matrix-text focus:outline-none',
            'border-matrix-border rounded transition-all duration-200',
            'appearance-none bg-no-repeat',
            // Styled dropdown arrow using background image
            'bg-[url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' width=\'16\' height=\'16\' viewBox=\'0 0 24 24\' fill=\'none\' stroke=\'%2300ff41\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-linejoin=\'round\'%3E%3Cpolyline points=\'6 9 12 15 18 9\'%3E%3C/polyline%3E%3C/svg%3E")]',
            'bg-[position:right_0.75rem_center]',
            'bg-[size:1em]',
            'pr-10',
            error && 'border-matrix-danger',
            className
          )}
          ref={ref}
          {...props}
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        {error && <p className="mt-1 text-sm text-matrix-danger">{error}</p>}
      </div>
    );
  }
);

Select.displayName = 'Select';

export { Select };

===== src/components/ui/Checkbox.tsx =====
import React, { forwardRef, InputHTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface CheckboxProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
  label?: string;
  error?: string;
}

const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(
  ({ className, label, error, id, ...props }, ref) => {
    const checkboxId = id || Math.random().toString(36).substring(2, 9);

    return (
      <div className="flex items-start mb-4">
        <div className="flex items-center h-5">
          <input
            id={checkboxId}
            type="checkbox"
            className={cn(
              'w-4 h-4 bg-matrix-bg border-matrix-border rounded focus:ring-2 focus:ring-matrix-text',
              'text-matrix-text-bright cursor-pointer appearance-none checked:bg-matrix-primary',
              'relative before:absolute before:inset-0 before:bg-matrix-primary before:scale-0 checked:before:scale-100 before:transition-transform',
              'after:absolute after:top-[2px] after:left-[6px] after:w-[5px] after:h-[10px] after:border-r-2 after:border-b-2 after:border-matrix-bg after:rotate-45 after:opacity-0 checked:after:opacity-100',
              error && 'border-matrix-danger',
              className
            )}
            ref={ref}
            {...props}
          />
        </div>
        <div className="ml-3 text-sm">
          {label && (
            <label htmlFor={checkboxId} className="text-matrix-text cursor-pointer">
              {label}
            </label>
          )}
          {error && <p className="mt-1 text-sm text-matrix-danger">{error}</p>}
        </div>
      </div>
    );
  }
);

Checkbox.displayName = 'Checkbox';

export { Checkbox };

===== src/components/ui/Radio.tsx =====
import React, { forwardRef, InputHTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface RadioProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
  label?: string;
}

const Radio = forwardRef<HTMLInputElement, RadioProps>(
  ({ className, label, id, ...props }, ref) => {
    const radioId = id || Math.random().toString(36).substring(2, 9);

    return (
      <div className="flex items-center mb-4">
        <input
          id={radioId}
          type="radio"
          className={cn(
            'w-4 h-4 bg-matrix-bg border-matrix-border focus:ring-2 focus:ring-matrix-text',
            'text-matrix-text-bright cursor-pointer appearance-none rounded-full',
            'relative before:absolute before:inset-0 before:rounded-full before:bg-matrix-primary before:scale-0 checked:before:scale-100 before:transition-transform',
            'after:absolute after:top-[3px] after:left-[3px] after:w-[6px] after:h-[6px] after:rounded-full after:bg-matrix-bg after:opacity-0 checked:after:opacity-100',
            className
          )}
          ref={ref}
          {...props}
        />
        {label && (
          <label htmlFor={radioId} className="ml-2 text-sm text-matrix-text cursor-pointer">
            {label}
          </label>
        )}
      </div>
    );
  }
);

Radio.displayName = 'Radio';

export { Radio };

===== src/components/ui/Switch.tsx =====
import React, { forwardRef, InputHTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface SwitchProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'type'> {
  label?: string;
}

const Switch = forwardRef<HTMLInputElement, SwitchProps>(
  ({ className, label, id, ...props }, ref) => {
    const switchId = id || Math.random().toString(36).substring(2, 9);

    return (
      <label
        htmlFor={switchId}
        className="relative inline-flex items-center cursor-pointer mb-4"
      >
        <input
          id={switchId}
          type="checkbox"
          className="sr-only peer"
          ref={ref}
          {...props}
        />
        <div
          className={cn(
            "w-11 h-6 bg-matrix-bg border border-matrix-border rounded-full peer",
            "peer-focus:ring-2 peer-focus:ring-matrix-text peer-focus:outline-none",
            "peer-checked:after:translate-x-full peer-checked:after:border-white",
            "after:content-[''] after:absolute after:top-[2px] after:left-[2px]",
            "after:bg-matrix-text-dim after:border-matrix-border after:border after:rounded-full",
            "after:h-5 after:w-5 after:transition-all",
            "peer-checked:bg-matrix-primary peer-checked:bg-opacity-20",
            "peer-checked:after:bg-matrix-text",
            className
          )}
        ></div>
        {label && <span className="ml-3 text-sm text-matrix-text">{label}</span>}
      </label>
    );
  }
);

Switch.displayName = 'Switch';

export { Switch };

===== src/components/ui/Dropdown.tsx =====
import React, { useState, useRef, useEffect } from 'react';
import { cn } from '@/utils/cn';

interface DropdownProps {
  trigger: React.ReactNode;
  children: React.ReactNode;
  align?: 'left' | 'right';
  className?: string;
  dropdownClassName?: string;
}

export const Dropdown: React.FC<DropdownProps> = ({
  trigger,
  children,
  align = 'left',
  className,
  dropdownClassName,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const handleClickOutside = (event: MouseEvent) => {
    if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  return (
    <div ref={dropdownRef} className={cn('relative inline-block', className)}>
      <div onClick={() => setIsOpen(!isOpen)}>{trigger}</div>

      {isOpen && (
        <div
          className={cn(
            'absolute z-10 mt-2 w-48 rounded border border-matrix-border bg-matrix-panel shadow-lg',
            align === 'left' ? 'left-0' : 'right-0',
            dropdownClassName
          )}
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="dropdown-menu"
        >
          {children}
        </div>
      )}
    </div>
  );
};

interface DropdownItemProps {
  children: React.ReactNode;
  onClick?: () => void;
  className?: string;
  disabled?: boolean;
}

export const DropdownItem: React.FC<DropdownItemProps> = ({
  children,
  onClick,
  className,
  disabled = false,
}) => {
  return (
    <button
      className={cn(
        'block w-full text-left px-4 py-2 text-sm text-matrix-text hover:bg-matrix-bg hover:text-matrix-text-bright',
        disabled && 'opacity-50 cursor-not-allowed',
        className
      )}
      onClick={onClick}
      disabled={disabled}
      role="menuitem"
    >
      {children}
    </button>
  );
};

export const DropdownDivider: React.FC = () => {
  return <hr className="border-t border-matrix-border my-1" />;
};

export const DropdownHeader: React.FC<{ children: React.ReactNode; className?: string }> = ({
  children,
  className,
}) => {
  return (
    <div
      className={cn(
        'px-4 py-2 text-xs font-semibold text-matrix-text-dim uppercase tracking-wider',
        className
      )}
    >
      {children}
    </div>
  );
};

===== src/components/ui/Tooltip.tsx =====
import React, { useState, useRef, useEffect } from 'react';
import { cn } from '@/utils/cn';

interface TooltipProps {
  content: string;
  children: React.ReactElement;
  position?: 'top' | 'right' | 'bottom' | 'left';
  delay?: number;
  className?: string;
}

export const Tooltip: React.FC<TooltipProps> = ({
  content,
  children,
  position = 'top',
  delay = 300,
  className,
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const tooltipRef = useRef<HTMLDivElement>(null);

  const showTooltip = () => {
    timeoutRef.current = setTimeout(() => {
      setIsVisible(true);
    }, delay);
  };

  const hideTooltip = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    setIsVisible(false);
  };

  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  // Clone the child element and add event handlers
  const childWithProps = React.cloneElement(children, {
    onMouseEnter: showTooltip,
    onMouseLeave: hideTooltip,
    onFocus: showTooltip,
    onBlur: hideTooltip,
  });

  // Positioning classes
  const positionClasses = {
    top: '-translate-x-1/2 -translate-y-full left-1/2 bottom-[calc(100%+5px)]',
    right: 'translate-y-[-50%] translate-x-[5px] top-1/2 left-full',
    bottom: '-translate-x-1/2 translate-y-[5px] left-1/2 top-full',
    left: 'translate-y-[-50%] -translate-x-full top-1/2 right-[calc(100%+5px)]',
  };

  // Arrow positioning classes
  const arrowClasses = {
    top: 'left-1/2 -translate-x-1/2 bottom-full border-t-[5px] border-l-[5px] border-r-[5px] border-b-0 border-transparent border-t-matrix-panel',
    right: 'top-1/2 -translate-y-1/2 left-full border-r-[5px] border-t-[5px] border-b-[5px] border-l-0 border-transparent border-r-matrix-panel',
    bottom: 'left-1/2 -translate-x-1/2 top-full border-b-[5px] border-l-[5px] border-r-[5px] border-t-0 border-transparent border-b-matrix-panel',
    left: 'top-1/2 -translate-y-1/2 right-full border-l-[5px] border-t-[5px] border-b-[5px] border-r-0 border-transparent border-l-matrix-panel',
  };

  return (
    <div className="relative inline-block">
      {childWithProps}
      {isVisible && (
        <div
          ref={tooltipRef}
          className={cn(
            'absolute z-50 w-max max-w-xs px-2 py-1 text-sm rounded bg-matrix-panel text-matrix-text border border-matrix-border pointer-events-none',
            'opacity-0 animate-[fade-in_0.15s_ease-in-out_forwards]',
            positionClasses[position],
            className
          )}
          role="tooltip"
          aria-hidden={!isVisible}
        >
          {content}
          <div
            className={cn(
              'absolute w-0 h-0 pointer-events-none',
              arrowClasses[position]
            )}
          />
        </div>
      )}
    </div>
  );
};

===== src/components/layout/Container.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { cn } from '@/utils/cn';

export interface ContainerProps extends HTMLAttributes<HTMLDivElement> {
  fluid?: boolean;
}

const Container = forwardRef<HTMLDivElement, ContainerProps>(
  ({ className, fluid = false, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'mx-auto px-4',
          fluid ? 'w-full' : 'max-w-[var(--m-container-width)]',
          className
        )}
        {...props}
      />
    );
  }
);

Container.displayName = 'Container';

export { Container };

===== src/components/layout/Row.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { cn } from '@/utils/cn';

export interface RowProps extends HTMLAttributes<HTMLDivElement> {
  noGutters?: boolean;
}

const Row = forwardRef<HTMLDivElement, RowProps>(
  ({ className, noGutters = false, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'flex flex-wrap',
          noGutters
            ? 'mx-0'
            : 'mx-[calc(var(--m-gap)/-2)]',
          className
        )}
        {...props}
      />
    );
  }
);

Row.displayName = 'Row';

export { Row };

===== src/components/layout/Col.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { VariantProps, cva } from 'class-variance-authority';
import { cn } from '@/utils/cn';

const colVariants = cva(
  'px-[calc(var(--m-gap)/2)] mb-[var(--m-gap)]',
  {
    variants: {
      xs: {
        '1': 'w-[8.333333%]',
        '2': 'w-[16.666667%]',
        '3': 'w-[25%]',
        '4': 'w-[33.333333%]',
        '5': 'w-[41.666667%]',
        '6': 'w-[50%]',
        '7': 'w-[58.333333%]',
        '8': 'w-[66.666667%]',
        '9': 'w-[75%]',
        '10': 'w-[83.333333%]',
        '11': 'w-[91.666667%]',
        '12': 'w-[100%]',
        auto: 'w-auto',
      },
      sm: {
        '1': 'sm:w-[8.333333%]',
        '2': 'sm:w-[16.666667%]',
        '3': 'sm:w-[25%]',
        '4': 'sm:w-[33.333333%]',
        '5': 'sm:w-[41.666667%]',
        '6': 'sm:w-[50%]',
        '7': 'sm:w-[58.333333%]',
        '8': 'sm:w-[66.666667%]',
        '9': 'sm:w-[75%]',
        '10': 'sm:w-[83.333333%]',
        '11': 'sm:w-[91.666667%]',
        '12': 'sm:w-[100%]',
        auto: 'sm:w-auto',
      },
      md: {
        '1': 'md:w-[8.333333%]',
        '2': 'md:w-[16.666667%]',
        '3': 'md:w-[25%]',
        '4': 'md:w-[33.333333%]',
        '5': 'md:w-[41.666667%]',
        '6': 'md:w-[50%]',
        '7': 'md:w-[58.333333%]',
        '8': 'md:w-[66.666667%]',
        '9': 'md:w-[75%]',
        '10': 'md:w-[83.333333%]',
        '11': 'md:w-[91.666667%]',
        '12': 'md:w-[100%]',
        auto: 'md:w-auto',
      },
      lg: {
        '1': 'lg:w-[8.333333%]',
        '2': 'lg:w-[16.666667%]',
        '3': 'lg:w-[25%]',
        '4': 'lg:w-[33.333333%]',
        '5': 'lg:w-[41.666667%]',
        '6': 'lg:w-[50%]',
        '7': 'lg:w-[58.333333%]',
        '8': 'lg:w-[66.666667%]',
        '9': 'lg:w-[75%]',
        '10': 'lg:w-[83.333333%]',
        '11': 'lg:w-[91.666667%]',
        '12': 'lg:w-[100%]',
        auto: 'lg:w-auto',
      },
      xl: {
        '1': 'xl:w-[8.333333%]',
        '2': 'xl:w-[16.666667%]',
        '3': 'xl:w-[25%]',
        '4': 'xl:w-[33.333333%]',
        '5': 'xl:w-[41.666667%]',
        '6': 'xl:w-[50%]',
        '7': 'xl:w-[58.333333%]',
        '8': 'xl:w-[66.666667%]',
        '9': 'xl:w-[75%]',
        '10': 'xl:w-[83.333333%]',
        '11': 'xl:w-[91.666667%]',
        '12': 'xl:w-[100%]',
        auto: 'xl:w-auto',
      },
    },
    defaultVariants: {
      xs: '12',
    },
  }
);

export interface ColProps
  extends HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof colVariants> {}

const Col = forwardRef<HTMLDivElement, ColProps>(
  ({ className, xs, sm, md, lg, xl, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(colVariants({ xs, sm, md, lg, xl }), className)}
        {...props}
      />
    );
  }
);

Col.displayName = 'Col';

export { Col };

===== src/components/layout/Navbar.tsx =====
import React, { useState, forwardRef, HTMLAttributes } from 'react';
import { cn } from '@/utils/cn';
import { Container } from './Container';

export interface NavbarProps extends HTMLAttributes<HTMLElement> {
  fixed?: boolean;
  transparent?: boolean;
  bordered?: boolean;
  containerFluid?: boolean;
}

const Navbar = forwardRef<HTMLElement, NavbarProps>(
  ({ className, children, fixed = false, transparent = false, bordered = true, containerFluid = false, ...props }, ref) => {
    const [isOpen, setIsOpen] = useState(false);

    return (
      <nav
        ref={ref}
        className={cn(
          'bg-matrix-panel z-10',
          fixed && 'fixed top-0 left-0 right-0',
          bordered && 'border-b border-matrix-border',
          transparent && 'bg-transparent backdrop-blur-sm',
          className
        )}
        {...props}
      >
        <Container fluid={containerFluid}>
          <div className="flex flex-wrap items-center justify-between py-4">
            {children}
          </div>
        </Container>
      </nav>
    );
  }
);

Navbar.displayName = 'Navbar';

interface NavbarBrandProps extends HTMLAttributes<HTMLDivElement> {}

const NavbarBrand = forwardRef<HTMLDivElement, NavbarBrandProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'flex items-center text-matrix-text-bright font-matrix-hacker text-lg font-bold',
          className
        )}
        {...props}
      >
        {children}
      </div>
    );
  }
);

NavbarBrand.displayName = 'NavbarBrand';

interface NavbarTogglerProps extends HTMLAttributes<HTMLButtonElement> {
  isOpen: boolean;
  onClick: () => void;
}

const NavbarToggler = forwardRef<HTMLButtonElement, NavbarTogglerProps>(
  ({ className, isOpen, onClick, ...props }, ref) => {
    return (
      <button
        ref={ref}
        className={cn(
          'block md:hidden p-2 text-matrix-text hover:text-matrix-text-bright focus:outline-none',
          className
        )}
        onClick={onClick}
        aria-expanded={isOpen}
        aria-label="Toggle navigation"
        {...props}
      >
        <div className="w-6 flex items-center justify-center relative h-5">
          <span
            className={cn(
              'absolute h-0.5 w-full bg-current transform transition duration-300 ease-in-out',
              isOpen ? 'rotate-45' : '-translate-y-1.5'
            )}
          />
          <span
            className={cn(
              'absolute h-0.5 bg-current transform transition-all duration-200 ease-in-out',
              isOpen ? 'w-0 opacity-0' : 'w-full opacity-100'
            )}
          />
          <span
            className={cn(
              'absolute h-0.5 w-full bg-current transform transition duration-300 ease-in-out',
              isOpen ? '-rotate-45' : 'translate-y-1.5'
            )}
          />
        </div>
      </button>
    );
  }
);

NavbarToggler.displayName = 'NavbarToggler';

interface NavbarCollapseProps extends HTMLAttributes<HTMLDivElement> {
  isOpen: boolean;
}

const NavbarCollapse = forwardRef<HTMLDivElement, NavbarCollapseProps>(
  ({ className, isOpen, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'w-full md:flex md:w-auto md:order-1',
          isOpen ? 'block' : 'hidden',
          className
        )}
        {...props}
      >
        {children}
      </div>
    );
  }
);

NavbarCollapse.displayName = 'NavbarCollapse';

interface NavbarNavProps extends HTMLAttributes<HTMLUListElement> {}

const NavbarNav = forwardRef<HTMLUListElement, NavbarNavProps>(
  ({ className, ...props }, ref) => {
    return (
      <ul
        ref={ref}
        className={cn(
          'flex flex-col mt-4 md:flex-row md:space-x-6 md:mt-0 md:text-sm md:font-medium',
          className
        )}
        {...props}
      />
    );
  }
);

NavbarNav.displayName = 'NavbarNav';

interface NavItemProps extends HTMLAttributes<HTMLLIElement> {
  active?: boolean;
}

const NavItem = forwardRef<HTMLLIElement, NavItemProps>(
  ({ className, active, ...props }, ref) => {
    return (
      <li
        ref={ref}
        className={cn(
          'py-2 md:py-0',
          active && 'text-matrix-text-bright',
          className
        )}
        {...props}
      />
    );
  }
);

NavItem.displayName = 'NavItem';

interface NavLinkProps extends HTMLAttributes<HTMLAnchorElement> {
  active?: boolean;
}

const NavLink = forwardRef<HTMLAnchorElement, NavLinkProps>(
  ({ className, active, ...props }, ref) => {
    return (
      <a
        ref={ref}
        className={cn(
          'block py-2 md:py-1 text-matrix-text hover:text-matrix-text-bright transition-colors duration-200',
          active && 'text-matrix-text-bright',
          className
        )}
        {...props}
      />
    );
  }
);

NavLink.displayName = 'NavLink';

export { Navbar, NavbarBrand, NavbarToggler, NavbarCollapse, NavbarNav, NavItem, NavLink };

===== src/components/layout/Sidebar.tsx =====
import React, { forwardRef, HTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface SidebarProps extends HTMLAttributes<HTMLDivElement> {
  isOpen?: boolean;
  onClose?: () => void;
  position?: 'left' | 'right';
  overlay?: boolean;
  width?: string;
}

const Sidebar = forwardRef<HTMLDivElement, SidebarProps>(
  (
    {
      className,
      children,
      isOpen = true,
      onClose,
      position = 'left',
      overlay = false,
      width = '280px',
      ...props
    },
    ref
  ) => {
    const handleOverlayClick = () => {
      if (onClose) {
        onClose();
      }
    };

    return (
      <>
        {overlay && isOpen && (
          <div
            className="fixed inset-0 bg-matrix-overlay z-40"
            onClick={handleOverlayClick}
            aria-hidden="true"
          />
        )}
        <div
          ref={ref}
          className={cn(
            'bg-matrix-panel border-matrix-border h-full overflow-y-auto transition-all duration-300 ease-in-out',
            position === 'left' ? 'border-r' : 'border-l',
            overlay ? 'fixed top-0 bottom-0 z-50' : 'relative',
            position === 'left' && overlay
              ? isOpen
                ? 'left-0'
                : '-left-full'
              : '',
            position === 'right' && overlay
              ? isOpen
                ? 'right-0'
                : '-right-full'
              : '',
            !overlay && !isOpen && 'hidden',
            className
          )}
          style={{ width }}
          {...props}
        >
          {children}
        </div>
      </>
    );
  }
);

Sidebar.displayName = 'Sidebar';

interface SidebarHeaderProps extends HTMLAttributes<HTMLDivElement> {}

const SidebarHeader = forwardRef<HTMLDivElement, SidebarHeaderProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('p-4 border-b border-matrix-border', className)}
        {...props}
      />
    );
  }
);

SidebarHeader.displayName = 'SidebarHeader';

interface SidebarContentProps extends HTMLAttributes<HTMLDivElement> {}

const SidebarContent = forwardRef<HTMLDivElement, SidebarContentProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('p-4', className)}
        {...props}
      />
    );
  }
);

SidebarContent.displayName = 'SidebarContent';

interface SidebarFooterProps extends HTMLAttributes<HTMLDivElement> {}

const SidebarFooter = forwardRef<HTMLDivElement, SidebarFooterProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('p-4 border-t border-matrix-border mt-auto', className)}
        {...props}
      />
    );
  }
);

SidebarFooter.displayName = 'SidebarFooter';

export { Sidebar, SidebarHeader, SidebarContent, SidebarFooter };

===== src/components/layout/Footer.tsx =====
import React, { HTMLAttributes, forwardRef } from 'react';
import { cn } from '@/utils/cn';
import { Container } from './Container';

export interface FooterProps extends HTMLAttributes<HTMLElement> {
  bordered?: boolean;
  containerFluid?: boolean;
}

const Footer = forwardRef<HTMLElement, FooterProps>(
  ({ className, children, bordered = true, containerFluid = false, ...props }, ref) => {
    return (
      <footer
        ref={ref}
        className={cn(
          'bg-matrix-panel py-6',
          bordered && 'border-t border-matrix-border',
          className
        )}
        {...props}
      >
        <Container fluid={containerFluid}>{children}</Container>
      </footer>
    );
  }
);

Footer.displayName = 'Footer';

export { Footer };

===== src/components/effects/GlitchText.tsx =====
import React, { HTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface GlitchTextProps extends HTMLAttributes<HTMLDivElement> {
  text: string;
  intensity?: 'light' | 'medium' | 'heavy';
  as?: keyof JSX.IntrinsicElements;
}

export const GlitchText: React.FC<GlitchTextProps> = ({
  text,
  intensity = 'medium',
  as: Component = 'div',
  className,
  ...props
}) => {
  // Set different animation values based on intensity
  const getIntensityStyles = () => {
    switch (intensity) {
      case 'light':
        return {
          beforeAnimation: 'animate-[glitch-1-light_2s_infinite_linear_alternate-reverse]',
          afterAnimation: 'animate-[glitch-2-light_3s_infinite_linear_alternate-reverse]',
        };
      case 'heavy':
        return {
          beforeAnimation: 'animate-[glitch-1-heavy_1.5s_infinite_linear_alternate-reverse]',
          afterAnimation: 'animate-[glitch-2-heavy_2s_infinite_linear_alternate-reverse]',
        };
      default: // medium
        return {
          beforeAnimation: 'animate-[glitch-1_2s_infinite_linear_alternate-reverse]',
          afterAnimation: 'animate-[glitch-2_3s_infinite_linear_alternate-reverse]',
        };
    }
  };

  const { beforeAnimation, afterAnimation } = getIntensityStyles();

  return (
    <Component
      data-text={text}
      className={cn(
        'relative text-matrix-text font-matrix tracking-wide',
        'before:content-[attr(data-text)] before:absolute before:top-0 before:left-0 before:w-full before:h-full before:bg-matrix-bg before:left-[2px] before:text-shadow-[hsl(0,100%,50%)_-2px_0] before:clip-path-[polygon(0_0,100%_0,100%_45%,0_45%)]',
        'after:content-[attr(data-text)] after:absolute after:top-0 after:left-0 after:w-full after:h-full after:bg-matrix-bg after:left-[-2px] after:text-shadow-[#00f_2px_0] after:clip-path-[polygon(0_55%,100%_55%,100%_100%,0_100%)]',
        beforeAnimation,
        afterAnimation,
        className
      )}
      {...props}
    >
      {text}
    </Component>
  );
};

export default GlitchText;

===== src/components/effects/CodeRain.tsx =====
import React, { useEffect, useRef, useState } from 'react';
import { cn } from '@/utils/cn';

export interface CodeRainProps {
  className?: string;
  density?: 'low' | 'medium' | 'high';
  speed?: 'slow' | 'medium' | 'fast';
  charSet?: 'default' | 'matrix' | 'binary' | 'custom';
  customChars?: string;
  glitchEffect?: boolean;
  backgroundColor?: string;
  textColor?: string;
  height?: string;
}

export const CodeRain: React.FC<CodeRainProps> = ({
  className,
  density = 'medium',
  speed = 'medium',
  charSet = 'default',
  customChars = '',
  glitchEffect = true,
  backgroundColor = 'var(--m-bg)',
  textColor = 'var(--m-text)',
  height = '100%',
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  const animationRef = useRef<number | null>(null);

  // Get the character set based on the prop
  const getCharacters = () => {
    switch (charSet) {
      case 'matrix':
        return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$+-*/=%"\'#&_(),.;:?!\\|{}<>[]^~';
      case 'binary':
        return '01';
      case 'custom':
        return customChars || 'abcdefghijklmnopqrstuvwxyz0123456789';
      default:
        return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$+-*/=%"\'#&_(),.;:?!\\|{}<>[]^~';
    }
  };

  // Get density value
  const getDensityValue = () => {
    switch (density) {
      case 'low':
        return 0.01;
      case 'high':
        return 0.03;
      default: // medium
        return 0.02;
    }
  };

  // Get speed value
  const getSpeedValue = () => {
    switch (speed) {
      case 'slow':
        return 1;
      case 'fast':
        return 3;
      default: // medium
        return 2;
    }
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const updateDimensions = () => {
      const { offsetWidth, offsetHeight } = canvas.parentElement || { offsetWidth: 0, offsetHeight: 0 };
      setDimensions({ width: offsetWidth, height: offsetHeight });
      canvas.width = offsetWidth;
      canvas.height = offsetHeight;
    };

    updateDimensions();
    window.addEventListener('resize', updateDimensions);

    return () => {
      window.removeEventListener('resize', updateDimensions);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas || dimensions.width === 0 || dimensions.height === 0) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const characters = getCharacters();
    const densityValue = getDensityValue();
    const speedValue = getSpeedValue();

    // Column properties
    const fontSize = 16;
    const columns = Math.floor(dimensions.width / fontSize);
    const drops: number[] = Array(columns).fill(1);

    // Frame rate control
    let lastTime = 0;
    const framesPerSecond = 30;
    const frameInterval = 1000 / framesPerSecond;

    const draw = (timestamp: number) => {
      // Calculate elapsed time
      const elapsed = timestamp - lastTime;

      // If enough time has passed, draw the next frame
      if (elapsed > frameInterval) {
        lastTime = timestamp - (elapsed % frameInterval);

        // Semi-transparent black background to show trail effect
        ctx.fillStyle = backgroundColor;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Set green text
        ctx.fillStyle = textColor;
        ctx.font = `${fontSize}px courier`;

        // Loop over each column
        for (let i = 0; i < drops.length; i++) {
          // Generate a random character from our set
          const text = characters.charAt(Math.floor(Math.random() * characters.length));

          // Randomize brightness for glitch effect if enabled
          if (glitchEffect && Math.random() > 0.95) {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'; // Bright white for glitch effect
          } else {
            ctx.fillStyle = textColor;
          }

          // Draw the character
          ctx.fillText(text, i * fontSize, drops[i] * fontSize);

          // Randomly reset some columns to top
          if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
            drops[i] = 0;
          }

          // Increment y coordinate for next character
          drops[i] += speedValue;
        }
      }

      animationRef.current = requestAnimationFrame(draw);
    };

    // Initialize additional raindrop streams based on density
    for (let i = 0; i < Math.floor(columns * densityValue); i++) {
      const randomColumn = Math.floor(Math.random() * columns);
      drops[randomColumn] = Math.floor(Math.random() * (canvas.height / fontSize));
    }

    // Start animation
    animationRef.current = requestAnimationFrame(draw);

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [dimensions, density, speed, charSet, customChars, glitchEffect, backgroundColor, textColor]);

  return (
    <div
      className={cn('relative overflow-hidden', className)}
      style={{ height }}
    >
      <canvas
        ref={canvasRef}
        className="absolute inset-0"
      />
    </div>
  );
};

export default CodeRain;

===== src/components/effects/Terminal.tsx =====
import React, { useState, useEffect, useRef } from 'react';
import { cn } from '@/utils/cn';

export interface TerminalProps {
  title?: string;
  prompt?: string;
  commands?: Record<string, (args: string[]) => string>;
  initialCommands?: string[];
  className?: string;
  height?: string;
  allowUserInput?: boolean;
  readOnly?: boolean;
  showHeader?: boolean;
  autoFocus?: boolean;
}

export const Terminal: React.FC<TerminalProps> = ({
  title = 'Matrix Terminal',
  prompt = '>',
  commands = {},
  initialCommands = [],
  className,
  height = '400px',
  allowUserInput = true,
  readOnly = false,
  showHeader = true,
  autoFocus = false,
}) => {
  const [output, setOutput] = useState<string[]>([]);
  const [currentInput, setCurrentInput] = useState('');
  const [history, setHistory] = useState<string[]>([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  const inputRef = useRef<HTMLInputElement>(null);
  const outputRef = useRef<HTMLDivElement>(null);

  const defaultCommands = {
    help: () =>
      'Available commands: ' +
      Object.keys({
        ...defaultCommands,
        ...commands,
      }).join(', '),
    clear: () => {
      setOutput([]);
      return '';
    },
    echo: (args: string[]) => args.join(' '),
    date: () => new Date().toLocaleString(),
  };

  const allCommands = {
    ...defaultCommands,
    ...commands,
  };

  useEffect(() => {
    // Execute initial commands
    initialCommands.forEach((cmd) => executeCommand(cmd));
  }, []);

  useEffect(() => {
    // Scroll to bottom on new output
    if (outputRef.current) {
      outputRef.current.scrollTop = outputRef.current.scrollHeight;
    }
  }, [output]);

  const executeCommand = (input: string) => {
    // Add command to output
    setOutput((prev) => [...prev, `${prompt} ${input}`]);

    // Process command
    const args = input.trim().split(' ');
    const command = args[0].toLowerCase();
    const commandArgs = args.slice(1);

    if (command === '') {
      // Do nothing for empty command
    } else if (command in allCommands) {
      try {
        const result = allCommands[command](commandArgs);
        if (result) {
          setOutput((prev) => [...prev, result]);
        }
      } catch (error) {
        setOutput((prev) => [...prev, `Error executing command: ${error}`]);
      }
    } else {
      setOutput((prev) => [...prev, `Command not found: ${command}. Type 'help' for available commands.`]);
    }

    // Add to history if not empty
    if (input.trim()) {
      setHistory((prev) => [input, ...prev].slice(0, 50)); // Keep last 50 commands
    }

    setCurrentInput('');
    setHistoryIndex(-1);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentInput(e.target.value);
  };

  const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      executeCommand(currentInput);
    } else if (e.key === 'ArrowUp') {
      // Navigate command history (older)
      e.preventDefault();
      if (history.length > 0 && historyIndex < history.length - 1) {
        const newIndex = historyIndex + 1;
        setHistoryIndex(newIndex);
        setCurrentInput(history[newIndex]);
      }
    } else if (e.key === 'ArrowDown') {
      // Navigate command history (newer)
      e.preventDefault();
      if (historyIndex > 0) {
        const newIndex = historyIndex - 1;
        setHistoryIndex(newIndex);
        setCurrentInput(history[newIndex]);
      } else if (historyIndex === 0) {
        setHistoryIndex(-1);
        setCurrentInput('');
      }
    }
  };

  const focusInput = () => {
    if (allowUserInput && inputRef.current) {
      inputRef.current.focus();
    }
  };

  useEffect(() => {
    if (autoFocus) {
      focusInput();
    }
  }, [autoFocus]);

  return (
    <div
      className={cn(
        'bg-[rgba(0,10,0,0.95)] border border-matrix-border rounded overflow-hidden font-matrix-hacker shadow-[0_0_20px_rgba(0,0,0,0.5),0_0_10px_var(--m-glow)]',
        className
      )}
      onClick={focusInput}
      style={{ height }}
    >
      {showHeader && (
        <div className="flex justify-between items-center p-2 bg-[rgba(0,20,0,0.7)] border-b border-matrix-border">
          <div className="text-sm font-bold text-matrix-text tracking-wider">{title}</div>
          <div className="flex gap-1.5">
            <div className="w-3 h-3 rounded-full bg-[#FF5F56]"></div>
            <div className="w-3 h-3 rounded-full bg-[#FFBD2E]"></div>
            <div className="w-3 h-3 rounded-full bg-[#27C93F]"></div>
          </div>
        </div>
      )}

      <div className="p-4 h-full flex flex-col">
        <div
          ref={outputRef}
          className="flex-1 overflow-y-auto mb-2 whitespace-pre-wrap"
        >
          {output.map((line, i) => (
            <div key={i} className="mb-1 leading-tight">
              {line}
            </div>
          ))}
        </div>

        {allowUserInput && !readOnly && (
          <div className="flex items-center">
            <span className="text-matrix-text-bright mr-2">{prompt}</span>
            <input
              ref={inputRef}
              type="text"
              value={currentInput}
              onChange={handleInputChange}
              onKeyDown={handleInputKeyDown}
              className="flex-1 bg-transparent border-none outline-none text-matrix-text focus:text-matrix-text-bright caret-matrix-text"
              aria-label="Terminal input"
            />
            <span className="w-2.5 h-5 bg-matrix-text animate-[cursor-blink_1s_step-end_infinite]"></span>
          </div>
        )}
      </div>
    </div>
  );
};

export default Terminal;

===== src/components/effects/Scanline.tsx =====
import React, { HTMLAttributes } from 'react';
import { cn } from '@/utils/cn';

export interface ScanlineProps extends HTMLAttributes<HTMLDivElement> {
  intensity?: 'light' | 'medium' | 'heavy';
  type?: 'horizontal' | 'vertical' | 'both';
  children: React.ReactNode;
}

export const Scanline: React.FC<ScanlineProps> = ({
  intensity = 'medium',
  type = 'horizontal',
  children,
  className,
  ...props
}) => {
  // Get CSS variables based on intensity
  const getIntensityStyles = () => {
    switch (intensity) {
      case 'light':
        return {
          opacity: '0.3',
          size: '1px',
          gap: '10px',
        };
      case 'heavy':
        return {
          opacity: '0.7',
          size: '3px',
          gap: '8px',
        };
      default: // medium
        return {
          opacity: '0.5',
          size: '2px',
          gap: '9px',
        };
    }
  };

  const { opacity, size, gap } = getIntensityStyles();

  const horizontalScanline = type === 'horizontal' || type === 'both';
  const verticalScanline = type === 'vertical' || type === 'both';

  return (
    <div
      className={cn(
        'relative overflow-hidden',
        className
      )}
      {...props}
    >
      {/* Original content */}
      {children}

      {/* Horizontal scanlines */}
      {horizontalScanline && (
        <div
          className="pointer-events-none absolute inset-0 z-10"
          style={{
            backgroundImage: `linear-gradient(
              to bottom,
              transparent ${gap},
              rgba(0, 0, 0, ${opacity}) ${gap},
              rgba(0, 0, 0, ${opacity}) calc(${gap} + ${size}),
              transparent calc(${gap} + ${size})
            )`,
            backgroundSize: `100% calc(${gap} + ${size})`,
            backgroundRepeat: 'repeat',
          }}
        />
      )}

      {/* Vertical scanlines */}
      {verticalScanline && (
        <div
          className="pointer-events-none absolute inset-0 z-10"
          style={{
            backgroundImage: `linear-gradient(
              to right,
              transparent ${gap},
              rgba(0, 0, 0, ${opacity}) ${gap},
              rgba(0, 0, 0, ${opacity}) calc(${gap} + ${size}),
              transparent calc(${gap} + ${size})
            )`,
            backgroundSize: `calc(${gap} + ${size}) 100%`,
            backgroundRepeat: 'repeat',
          }}
        />
      )}

      {/* Moving scanline effect */}
      {horizontalScanline && (
        <div
          className="pointer-events-none absolute inset-0 z-20"
          style={{
            background: `linear-gradient(to bottom, transparent, transparent 50%, rgba(0, 255, 65, 0.1) 50%, transparent)`,
            backgroundSize: '100% 4px',
            animation: 'scanline 10s linear infinite',
          }}
        />
      )}
    </div>
  );
};

export default Scanline;

===== src/components/effects/NeuralNetwork.tsx =====
import React, { useEffect, useRef, useState } from 'react';
import { cn } from '@/utils/cn';

export interface NeuralNetworkProps {
  className?: string;
  height?: string;
  width?: string;
  layers?: number[];
  animated?: boolean;
  showLabels?: boolean;
  theme?: 'matrix' | 'blue' | 'purple';
}

interface Node {
  x: number;
  y: number;
  active: boolean;
}

interface Connection {
  from: Node;
  to: Node;
  active: boolean;
}

export const NeuralNetwork: React.FC<NeuralNetworkProps> = ({
  className,
  height = '300px',
  width = '100%',
  layers = [4, 6, 5, 3],
  animated = true,
  showLabels = true,
  theme = 'matrix',
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [nodes, setNodes] = useState<Node[][]>([]);
  const [connections, setConnections] = useState<Connection[]>([]);
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  
  // Get theme colors
  const getThemeColors = () => {
    switch (theme) {
      case 'blue':
        return {
          nodeColor: '#0066ff',
          activeNodeColor: '#00aaff',
          connectionColor: 'rgba(0, 102, 255, 0.3)',
          activeConnectionColor: '#0066ff',
          glow: 'rgba(0, 102, 255, 0.6)',
          textColor: '#0099ff'
        };
      case 'purple':
        return {
          nodeColor: '#aa00ff',
          activeNodeColor: '#cc00ff',
          connectionColor: 'rgba(170, 0, 255, 0.3)',
          activeConnectionColor: '#aa00ff',
          glow: 'rgba(170, 0, 255, 0.6)',
          textColor: '#cc33ff'
        };
      default: // matrix
        return {
          nodeColor: 'var(--m-text)',
          activeNodeColor: 'var(--m-text-bright)',
          connectionColor: 'var(--m-text-dim)',
          activeConnectionColor: 'var(--m-text)',
          glow: 'var(--m-glow)',
          textColor: 'var(--m-text)'
        };
    }
  };

  // Initialize network
  useEffect(() => {
    if (!containerRef.current) return;
    
    const updateDimensions = () => {
      if (containerRef.current) {
        const { clientWidth, clientHeight } = containerRef.current;
        setDimensions({ width: clientWidth, height: clientHeight });
      }
    };
    
    updateDimensions();
    window.addEventListener('resize', updateDimensions);
    
    return () => {
      window.removeEventListener('resize', updateDimensions);
    };
  }, []);

  // Generate nodes and connections when dimensions change
  useEffect(() => {
    if (dimensions.width === 0 || dimensions.height === 0) return;
    
    const newNodes: Node[][] = [];
    const newConnections: Connection[] = [];
    
    // Generate nodes for each layer
    const layerGap = dimensions.width / (layers.length + 1);
    
    layers.forEach((nodeCount, layerIndex) => {
      const layerX = layerGap * (layerIndex + 1);
      const layerNodes: Node[] = [];
      
      // Calculate vertical spacing
      const nodeGap = dimensions.height / (nodeCount + 1);
      
      for (let i = 0; i < nodeCount; i++) {
        const nodeY = nodeGap * (i + 1);
        layerNodes.push({
          x: layerX,
          y: nodeY,
          active: false
        });
      }
      
      newNodes.push(layerNodes);
    });
    
    // Generate connections between layers
    for (let i = 0; i < newNodes.length - 1; i++) {
      const currentLayer = newNodes[i];
      const nextLayer = newNodes[i + 1];
      
      // Connect each node to all nodes in the next layer
      currentLayer.forEach(fromNode => {
        nextLayer.forEach(toNode => {
          newConnections.push({
            from: fromNode,
            to: toNode,
            active: false
          });
        });
      });
    }
    
    setNodes(newNodes);
    setConnections(newConnections);
  }, [dimensions, layers]);

  // Animation function
  useEffect(() => {
    if (!animated || nodes.length === 0) return;
    
    const activationInterval = setInterval(() => {
      // Randomly activate input nodes
      setNodes(prevNodes => {
        const newNodes = [...prevNodes];
        const inputLayer = [...newNodes[0]];
        
        // Reset all nodes
        newNodes.forEach(layer => {
          layer.forEach(node => {
            node.active = false;
          });
        });
        
        // Activate a random input node
        const randomNodeIndex = Math.floor(Math.random() * inputLayer.length);
        inputLayer[randomNodeIndex].active = true;
        newNodes[0] = inputLayer;
        
        return newNodes;
      });
      
      // Update connections based on active nodes
      setConnections(prevConnections => {
        return prevConnections.map(conn => ({
          ...conn,
          active: conn.from.active && Math.random() > 0.5
        }));
      });
      
      // After a delay, activate nodes in the next layer based on connections
      setTimeout(() => {
        setNodes(prevNodes => {
          const newNodes = [...prevNodes];
          
          // Activate nodes if they have an active incoming connection
          for (let i = 1; i < newNodes.length; i++) {
            newNodes[i] = newNodes[i].map(node => ({
              ...node,
              active: connections.some(conn => conn.to === node && conn.active)
            }));
          }
          
          return newNodes;
        });
      }, 150);
      
    }, 2000);
    
    return () => clearInterval(activationInterval);
  }, [animated, nodes, connections]);
  
  const themeColors = getThemeColors();

  return (
    <div
      ref={containerRef}
      className={cn(
        'relative bg-matrix-bg border border-matrix-border rounded overflow-hidden',
        className
      )}
      style={{ height, width }}
    >
      {/* Radial gradient background effect */}
      <div 
        className="absolute inset-0 bg-radial-gradient"
        style={{
          background: `radial-gradient(circle at 50% 50%, ${themeColors.glow} 0%, transparent 70%)`
        }}
      />
      
      {/* Render connections */}
      <svg className="absolute inset-0 w-full h-full">
        {connections.map((conn, i) => (
          <line
            key={`conn-${i}`}
            x1={conn.from.x}
            y1={conn.from.y}
            x2={conn.to.x}
            y2={conn.to.y}
            stroke={conn.active ? themeColors.activeConnectionColor : themeColors.connectionColor}
            strokeWidth={conn.active ? 2 : 1}
            style={{
              transition: 'stroke 0.3s',
              boxShadow: conn.active ? `0 0 5px ${themeColors.glow}` : 'none'
            }}
          />
        ))}
      </svg>
      
      {/* Render layers */}
      {nodes.map((layer, layerIndex) => (
        <div
          key={`layer-${layerIndex}`}
          className="absolute h-full"
          style={{ left: `${(layerIndex + 1) * 100 / (layers.length + 1)}%`, transform: 'translateX(-50%)' }}
        >
          {/* Layer label */}
          {showLabels && (
            <div 
              className="absolute top-2 text-center w-full text-xs font-matrix-hacker" 
              style={{ color: themeColors.textColor }}
            >
              {layerIndex === 0 ? 'Input' : layerIndex === layers.length - 1 ? 'Output' : `Hidden ${layerIndex}`}
            </div>
          )}
          
          {/* Render nodes */}
          {layer.map((node, nodeIndex) => (
            <div
              key={`node-${layerIndex}-${nodeIndex}`}
              className={cn(
                'absolute w-5 h-5 rounded-full border-2 transform -translate-x-1/2 -translate-y-1/2',
                node.active && 'animate-[neuron-pulse_2s_infinite]'
              )}
              style={{
                left: 0,
                top: node.y,
                backgroundColor: node.active ? themeColors.activeNodeColor : 'transparent',
                borderColor: node.active ? themeColors.activeNodeColor : themeColors.nodeColor,
                boxShadow: node.active ? `0 0 10px ${themeColors.glow}` : 'none',
                transition: 'background-color 0.3s, border-color 0.3s, box-shadow 0.3s'
              }}
            />
          ))}
        </div>
      ))}
    </div>
  );
};

export default NeuralNetwork;

===== src/hooks/useMediaQuery.ts =====
import { useState, useEffect } from 'react';

export function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    // Skip for SSR
    if (typeof window === 'undefined') {
      return;
    }

    const mediaQuery = window.matchMedia(query);
    
    // Set initial value
    setMatches(mediaQuery.matches);

    // Update matches when query changes
    const handler = (event: MediaQueryListEvent) => {
      setMatches(event.matches);
    };

    // Add event listener
    mediaQuery.addEventListener('change', handler);
    
    // Cleanup
    return () => {
      mediaQuery.removeEventListener('change', handler);
    };
  }, [query]);

  return matches;
}

export default useMediaQuery;

===== src/hooks/useLocalStorage.ts =====
import { useState, useEffect } from 'react';

export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {
  // State to store our value
  // Pass initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }

    try {
      // Get from local storage by key
      const item = window.localStorage.getItem(key);
      // Parse stored json or if none return initialValue
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // If error also return initialValue
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Return a wrapped version of useState's setter function that
  // persists the new value to localStorage.
  const setValue = (value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore =
        value instanceof Function ? value(storedValue) : value;
      
      // Save state
      setStoredValue(valueToStore);
      
      // Save to local storage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      // A more advanced implementation would handle the error case
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  // Subscribe to localStorage changes in other tabs/windows
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === key && e.newValue) {
        try {
          setStoredValue(JSON.parse(e.newValue));
        } catch (error) {
          console.error(`Error parsing localStorage key "${key}":`, error);
        }
      }
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('storage', handleStorageChange);
      return () => window.removeEventListener('storage', handleStorageChange);
    }
  }, [key]);

  return [storedValue, setValue];
}

export default useLocalStorage;

===== src/pages/_app.tsx =====
import { ThemeProvider } from '@/context/ThemeContext';
import '@/styles/globals.css';
import type { AppProps } from 'next/app';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <ThemeProvider>
      <Component {...pageProps} />
    </ThemeProvider>
  );
}

===== src/pages/index.tsx =====
import React, { useState } from 'react';
import Head from 'next/head';
import { Button } from '@/components/ui/Button';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/Card';
import { Navbar, NavbarBrand, NavbarToggler, NavbarCollapse, NavbarNav, NavItem, NavLink } from '@/components/layout/Navbar';
import { Container } from '@/components/layout/Container';
import { Row } from '@/components/layout/Row';
import { Col } from '@/components/layout/Col';
import { Footer } from '@/components/layout/Footer';
import { useTheme } from '@/context/ThemeContext';
import CodeRain from '@/components/effects/CodeRain';
import GlitchText from '@/components/effects/GlitchText';
import Terminal from '@/components/effects/Terminal';
import Scanline from '@/components/effects/Scanline';
import NeuralNetwork from '@/components/effects/NeuralNetwork';
import { Badge } from '@/components/ui/Badge';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/Alert';
import { Progress } from '@/components/ui/Progress';
import { Modal, ModalHeader, ModalBody, ModalFooter } from '@/components/ui/Modal';

export default function Home() {
  const { theme, toggleTheme } = useTheme();
  const [isNavOpen, setIsNavOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Terminal commands
  const terminalCommands = {
    theme: () => {
      toggleTheme();
      return `Theme switched to ${theme === 'dark' ? 'light' : 'dark'} mode`;
    },
    matrix: () => 'Welcome to the Matrix...',
  };

  return (
    <>
      <Head>
        <title>Matrix.css Next.js Framework</title>
        <meta name="description" content="A cyberpunk-inspired UI component library for Next.js" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CodeRain
        className="fixed inset-0 -z-10 opacity-50"
        density="low"
        glitchEffect={true}
      />

      <Navbar fixed>
        <NavbarBrand>
          <GlitchText text="MATRIX.CSS" intensity="light" />
        </NavbarBrand>
        <NavbarToggler
          isOpen={isNavOpen}
          onClick={() => setIsNavOpen(!isNavOpen)}
        />
        <NavbarCollapse isOpen={isNavOpen}>
          <NavbarNav className="ml-auto">
            <NavItem>
              <NavLink href="#components" active>Components</NavLink>
            </NavItem>
            <NavItem>
              <NavLink href="#effects">Effects</NavLink>
            </NavItem>
            <NavItem>
              <NavLink href="#documentation">Docs</NavLink>
            </NavItem>
            <NavItem>
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleTheme}
                aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
              >
                {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}
              </Button>
            </NavItem>
          </NavbarNav>
        </NavbarCollapse>
      </Navbar>

      <main className="py-20">
        <Container>
          <div className="text-center mb-16 relative">
            <h1 className="text-4xl md:text-6xl mb-4 relative inline-block">
              <span className="animate-glow-pulse">MATRIX.CSS</span>
            </h1>
            <p className="max-w-2xl mx-auto text-xl">
              A cyberpunk-inspired UI component library for Next.js
            </p>
            <div className="mt-8 flex flex-wrap justify-center gap-4">
              <Button variant="primary" hasGlow>Get Started</Button>
              <Button variant="outline">Documentation</Button>
            </div>
          </div>

          <section id="components" className="mb-20">
            <h2 className="text-3xl mb-6 border-b border-matrix-border pb-2">UI Components</h2>
            
            <Row>
              <Col xs="12" md="6" lg="4" className="mb-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Core UI Components</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="mb-4">Explore our Matrix-styled components for your Next.js projects.</p>
                    <div className="flex flex-wrap gap-2 mb-4">
                      <Badge variant="primary">Button</Badge>
                      <Badge variant="secondary">Card</Badge>
                      <Badge variant="outline">Alert</Badge>
                      <Badge variant="info">Badge</Badge>
                      <Badge variant="success">Modal</Badge>
                    </div>
                    <Progress value={75} max={100} variant="striped" showLabel />
                  </CardContent>
                  <CardFooter>
                    <Button variant="terminal" size="sm" onClick={() => setIsModalOpen(true)}>View Demo</Button>
                  </CardFooter>
                </Card>
              </Col>

              <Col xs="12" md="6" lg="4" className="mb-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Advanced Components</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="mb-4">Powerful components for building complex interfaces.</p>
                    <Alert variant="info" className="mb-4">
                      <AlertTitle>New Components Available</AlertTitle>
                      <AlertDescription>Check out our latest additions to the Matrix.css framework.</AlertDescription>
                    </Alert>
                    <Progress value={45} max={100} color="info" showLabel />
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" size="sm">Explore</Button>
                  </CardFooter>
                </Card>
              </Col>

              <Col xs="12" md="6" lg="4" className="mb-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Layout System</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="mb-4">Responsive grid system for perfect layouts on any device.</p>
                    <div className="grid grid-cols-6 gap-1 mb-4">
                      {[...Array(6)].map((_, i) => (
                        <div key={i} className="h-6 bg-matrix-primary bg-opacity-20 border border-matrix-border"></div>
                      ))}
                    </div>
                    <Progress value={90} max={100} color="success" showLabel />
                  </CardContent>
                  <CardFooter>
                    <Button variant="ghost" size="sm">Learn More</Button>
                  </CardFooter>
                </Card>
              </Col>
            </Row>
          </section>
          
          <section id="effects" className="mb-20">
            <h2 className="text-3xl mb-6 border-b border-matrix-border pb-2">Matrix Effects</h2>
            
            <Row>
              <Col xs="12" md="6" className="mb-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Neural Network Visualization</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <NeuralNetwork height="200px" />
                  </CardContent>
                </Card>
              </Col>
              
              <Col xs="12" md="6" className="mb-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Terminal Emulator</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Terminal
                      height="200px"
                      initialCommands={['echo Welcome to Matrix.css Terminal', 'help']}
                      commands={terminalCommands}
                    />
                  </CardContent>
                </Card>
              </Col>
            </Row>
            
            <Row>
              <Col xs="12" className="mb-6">
                <Scanline intensity="medium">
                  <Card>
                    <CardHeader>
                      <CardTitle>Visual Effects</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="mb-4">Matrix.css includes various cyberpunk-inspired visual effects:</p>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="p-4 border border-matrix-border rounded bg-matrix-bg bg-opacity-50">
                          <h4 className="font-matrix-hacker mb-2">Glitch Text</h4>
                          <GlitchText text="MATRIX" />
                        </div>
                        <div className="p-4 border border-matrix-border rounded bg-matrix-bg bg-opacity-50">
                          <h4 className="font-matrix-hacker mb-2">Code Rain</h4>
                          <div className="h-20 relative">
                            <CodeRain density="high" />
                          </div>
                        </div>
                        <div className="p-4 border border-matrix-border rounded bg-matrix-bg bg-opacity-50">
                          <h4 className="font-matrix-hacker mb-2">Scanlines</h4>
                          <Scanline intensity="heavy" type="horizontal">
                            <div className="h-20 flex items-center justify-center">
                              <span className="animate-glow-pulse">SYSTEM ONLINE</span>
                            </div>
                          </Scanline>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </Scanline>
              </Col>
            </Row>
          </section>
        </Container>
      </main>

      <Footer>
        <div className="text-center">
          <p className="text-sm text-matrix-text-dim">
            © {new Date().getFullYear()} Matrix.css | A Next.js UI Framework inspired by The Matrix
          </p>
        </div>
      </Footer>

      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        className="max-w-2xl"
      >
        <ModalHeader>
          <h3 className="text-xl font-bold">Component Library Demo</h3>
        </ModalHeader>
        <ModalBody>
          <div className="space-y-4">
            <h4 className="text-lg">Buttons</h4>
            <div className="flex flex-wrap gap-2">
              <Button variant="default">Default</Button>
              <Button variant="primary">Primary</Button>
              <Button variant="outline">Outline</Button>
              <Button variant="ghost">Ghost</Button>
              <Button variant="terminal">Terminal</Button>
              <Button variant="danger">Danger</Button>
            </div>
            
            <h4 className="text-lg pt-4">Alerts</h4>
            <div className="space-y-2">
              <Alert variant="primary">
                <AlertTitle>Primary Alert</AlertTitle>
                <AlertDescription>This is a primary alert — check it out!</AlertDescription>
              </Alert>
              <Alert variant="success">
                <AlertTitle>Success Alert</AlertTitle>
                <AlertDescription>Operation completed successfully.</AlertDescription>
              </Alert>
              <Alert variant="warning">
                <AlertTitle>Warning Alert</AlertTitle>
                <AlertDescription>Proceed with caution.</AlertDescription>
              </Alert>
              <Alert variant="danger">
                <AlertTitle>Danger Alert</AlertTitle>
                <AlertDescription>Critical error detected.</AlertDescription>
              </Alert>
            </div>
            
            <h4 className="text-lg pt-4">Progress</h4>
            <div className="space-y-2">
              <Progress value={25} max={100} />
              <Progress value={50} max={100} variant="striped" />
              <Progress value={75} max={100} variant="animated" />
            </div>
          </div>
        </ModalBody>
        <ModalFooter>
          <Button variant="ghost" onClick={() => setIsModalOpen(false)}>Close</Button>
          <Button variant="primary">View All Components</Button>
        </ModalFooter>
      </Modal>
    </>
  );
}